<?php


/**
 * Implements hook_perm().
 */
function rsc_taxonomy_permission() {
  $permissions = array();

  $permissions['administer rsc_taxonomy'] = array(
    'title' => t('Configure RSC taxonomy settings and menus')
  );

  return $permissions;
}


/**
 * Implementation of hook_menu().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_menu/7
 */
function rsc_taxonomy_menu() {
  $items = array();
  
  $items['rsc_taxonomy_menu/%'] = array(
    'page callback'     => 'rsc_taxonomy_get_menu_markup',
    'page arguments'    => array(1),
    'type'              => MENU_CALLBACK,
    'access callback'   => 'rsc_taxonomy_menu_access_callback',
    'access arguments'  => array(1),
    'delivery callback' => 'rsc_taxonomy_menu_delivery_callback',
  );

  $items['admin/structure/rsc-taxonomy'] = array(
    'title'            => 'RSC Taxonomy',
    'description'      => t("Configure RSC taxonomy menus."),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('rsc_taxonomy_admin_form'),
    'access arguments' => array('administer rsc_taxonomy'),
  );

  return $items;
}


/**
 * Implements hook_menu_alter().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_menu_alter/7
 * @param $items
 * Associative array of menu router definitions returned from hook_menu().
 */
function rsc_taxonomy_menu_alter(&$items) {

  // totally replace the taxonomy term page.
  $items['taxonomy/term/%taxonomy_term'] = array(
    'title'            => 'Taxonomy term',
    'title callback'   => 'taxonomy_term_title',
    'title arguments'  => array(2),
    'page callback'    => 'rsc_taxonomy_term_page',
    'page arguments'   => array(2),
    'access arguments' => array('access content'),
    'file'             => 'rsc_taxonomy.pages.inc',
    'file path'        => drupal_get_path('module', 'rsc_taxonomy'),
  );

}


/**
 * A form builder function to be called by drupal_get_form to build the admin page.
 * @return array
 * A form array
 */
function rsc_taxonomy_admin_form() {
  $form = array();
  $variable_name = "rsc_taxonomy_settings";

  // Get a list of vocabularies keyed by vid
  $vocabs = taxonomy_get_vocabularies();
  $vocab_options = array();
  foreach($vocabs as $vid => $vocab) {
    $vocab_options[$vid] = "{$vocab->name} (vid={$vid})";
  }

  // Get the current settings, if any
  $default_settings = array(
    'menus_enabled'     => array(),
    'sort_enable_field' => NULL,
    'sort_weight_field' => NULL,
    'nodes_per_page'    => 10,
  );
  $settings = variable_get($variable_name, $default_settings);

  // Get a list of enabled vocabularies
  $vocabs_enabled = array();
  foreach ($vocab_options as $key => $value) {
    if (isset($settings['menus_enabled'][$key]) && $settings['menus_enabled'][$key]) {
      $vocabs_enabled[$key] = $value;
    }
  }

  /*
   * Construct two lists:
   * - All fields that have instances on taxonomy terms
   * - All fields that have instances on nodes
   */
  $fieldmap = field_info_field_map();
  $taxonomy_fields = array(NULL=>"--none--",);
  $node_fields = array(NULL=>"--none--",);
  foreach($fieldmap as $fieldname => $fieldinfo) {
    if (!empty($fieldinfo['bundles']['taxonomy_term'])) {
      $taxonomy_fields[$fieldname] = $fieldname;
    }
    if (!empty($fieldinfo['bundles']['node'])) {
      $node_fields[$fieldname] = $fieldname;
    }
  }

  // build the form

  $form['menus_enabled'] = array(
    '#type'          => 'checkboxes',
    '#required'      => FALSE,
    '#multiple'      => TRUE,
    '#title'         => t('Enable vocabulary menus'),
    '#description'   => t('Enable creating menu blocks for these vocabularies. This does not use the Drupal menu system, but our own. NOTE: Until access checks are implemented, this exposes all taxonomy terms in the selected vocabularies to the public.'),
    '#default_value' => $settings['menus_enabled'],
    '#options'       => $vocab_options,
  );

  // TODO: select which roles may see which vocabularies? Separate module for that?

  $form['sort_enable_field'] = array(
    '#title'         => t('Field used to enable/disable sorting on taxonomy pages'),
    '#description'   => t('The should be a field instance on taxonomy terms. The field value should evaluate to TRUE for taxonomy terms that should have sorted node listings.'),
    '#type'          => 'select',
    '#multiple'      => FALSE,
    '#required'      => FALSE,
    '#options'       => $taxonomy_fields,
    '#default_value' => $settings['sort_enable_field'],
  );

  $form['sort_weight_field'] = array(
    '#title'         => t('Field used for node weight on sorted taxonomy pages'),
    '#description'   => t('This should be a field instance on nodes. The field value is used to sort the nodes, if node sorting is enabled for the term being listed.'),
    '#type'          => 'select',
    '#multiple'      => FALSE,
    '#required'      => FALSE,
    '#options'       => $node_fields,
    '#default_value' => $settings['sort_weight_field'],
  );

  $form['nodes_per_page'] = array(
    '#title'            => t('Number of nodes per page on taxonomy term pages'),
    '#description'      => t('If there are more nodes than this, they will be paginated.'),
    '#type'             => 'textfield',
    '#size'             => 4,
    '#multiple'         => FALSE,
    '#required'         => TRUE,
    '#default_value'    => $settings['nodes_per_page'],
    '#element_validate' => array('rsc_taxonomy_validate_npp'),
  );

  $form['save'] = array(
    '#type'   => 'submit',
    '#value'  => t('Save'),
  );

  if (!empty($vocabs_enabled)) {

    $form['menus_rebuild'] = array(
      '#type' => 'checkboxes',
      '#required' => FALSE,
      '#multiple' => TRUE,
      '#title' => t('Rebuild vocabulary menus'),
      '#description' => t('Select the menus to clear their caches and rebuild them.'),
      '#default_value' => array(),
      '#options' => $vocabs_enabled,
    );

    $form['rebuild'] = array(
      '#type'   => 'submit',
      '#value'  => t('Rebuild selected menus'),
      '#submit' => array('rsc_taxonomy_admin_form_submit_rebuild'),
      ''
    );

  }

  return $form;
}

function rsc_taxonomy_validate_npp($element, &$form_state, $form) {
  if (empty($element['#value']) || !is_numeric($element['#value']) || ((int)$element['#value']) != $element['#value'] || $element['#value'] < 1) {
    form_error($element, t('This must be an integer greater than 0.'));
  }
}

function rsc_taxonomy_admin_form_submit($form, &$form_state) {
  variable_set("rsc_taxonomy_settings", array(
    'menus_enabled'     => $form_state['values']['menus_enabled'],
    'sort_enable_field' => $form_state['values']['sort_enable_field'],
    'sort_weight_field' => $form_state['values']['sort_weight_field'],
    'nodes_per_page'    => $form_state['values']['nodes_per_page'],
  ));
}

function rsc_taxonomy_admin_form_submit_rebuild($form, &$form_state) {
  foreach ($form_state['values']['menus_rebuild'] as $vid => $must_rebuild) {
    if ($must_rebuild) {

      // clear caches
      cache_clear_all("rsc_taxonomy_vocab_tree_$vid",'cache');
      cache_clear_all("rsc_taxonomy_menu_markup_$vid",'cache');

      // regenerate markup
      rsc_taxonomy_get_menu_markup($vid);

    }
  }
}


/**
 * Implements hook_block_info().
 * https://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_info/7
 *
 * Defines a menu block for each selected vocabulary
 */
function rsc_taxonomy_block_info() {
  $blocks = array();

  // Get the module settings
  $settings = variable_get("rsc_taxonomy_settings", null);
  if (!empty($settings['menus_enabled'])) {

    // For every enabled vocabulary
    foreach ($settings['menus_enabled'] as $vid => $enabled) {
      if ($enabled) {

        // Define a menu block
        $blocks["menu_$vid"] = array(
          'info'  => t('RSC Taxonomy menu: "@vocab" (vid=@vid)', array(
            '@vocab' => taxonomy_vocabulary_load($vid)->name,
            '@vid'   => $vid
          )),
          'cache' => DRUPAL_NO_CACHE, // we cache and refresh it manually
        );

      }
    }
  }

  return $blocks;
}


/**
 * Implements hook_block_view($delta = '').
 * https://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_view/7
 *
 * Serves the content for menu blocks
 * @param $delta
 * The identifier for which block to render.
 * One of the keys of the $block array in rsc_taxonomy_block_info.
 * @return array
 * An array containing the block title and content.
 */
function rsc_taxonomy_block_view($delta) {
  $block = array();

  $parts = explode('_', $delta, 2);
  if ('menu' == $parts[0]) {
    $vid = (int) ($parts[1]);

    // Check if menu is enabled for this vocabulary
    $settings = variable_get("rsc_taxonomy_settings", NULL);
    if (isset($settings['menus_enabled'][$vid]) && $settings['menus_enabled'][$vid]) {

      // Construct the block
      $block['subject'] = null;
      $modified = variable_get("rsc_taxonomy_menu_modified_$vid", 0);
      $block['content'] = "<div class='content' vid='$vid' modified='$modified'><noscript>This menu requires Javascript.</noscript></div>";

    }
  }

  return $block;
}


/**
 * Return the taxonomy tree (possible from cache) for a specific vocabulary
 * @param $vid
 * Vocabulary id for which to load the tree
 * @return array
 * Nested array of taxonomy terms.
 * Array keys are the term ids of the top-level terms.
 * Array values are arrays containing the term properties,
 * as well as two other arrays:
 * parents: An indexed array of tids of terms that are this term's parents.
 * children: An array just like the top-level array (i.e. recursive).
 */
function rsc_taxonomy_get_vocab_tree($vid) {
  
  $tree = cache_get("rsc_taxonomy_vocab_tree_$vid");
  if (empty($tree)) { // if the data is not available from cache
  
//     drupal_set_message("Missed cache. Rebuilding tree.");
  
    $terms = taxonomy_get_tree($vid); // TODO: compare performance to simple sql query (combine with query below)
    $tree = array();
  
    // sort the array by weight while it is still flat // TODO: compare performance to quicksort
    function weightsort($a,$b) {
      return ($a->weight > $b->weight);
    }
    usort($terms,'weightsort');
  
    foreach($terms as &$term) {
  
      // key all terms by tid
      $tree[$term->tid] = &$term;
  
      // count nodes that fall directly under each term
      $term->nodes = db_query("SELECT count(nid) as num FROM taxonomy_index WHERE tid = :tid",array(':tid'=>$term->tid))->fetchField();
  
      // create array to contain children of each term
      $term->children = array();
  
    }
  
    // let each term be referenced by it's parent
    foreach($tree as $tid => &$term) {
      $parent_tid = $term->parents[0];
      if ($parent_tid) {
        $tree[$parent_tid]->children[$tid] = &$term;
      }
    }
  
    // unset terms in top level of array that have parents
    foreach($tree as $tid => &$term) {
      $parent_tid = $term->parents[0];
      if ($parent_tid) {
        unset($tree[$tid]); // unset term in base of array
      }
    }
  
    // cache the tree
    cache_set("rsc_taxonomy_vocab_tree_$vid", $tree, 'cache', CACHE_PERMANENT);
  
  } else {
//     drupal_set_message("Hit cache. Reusing tree.");
    $tree = $tree->data;
  }

  return $tree;
}


/**
 * Get the markup for a taxonomy vocabulary menu
 * @param $vid
 * The vocabulary id for which to build the menu
 * @return string
 * Markup for the menu
 */
function rsc_taxonomy_get_menu_markup($vid) {
  $cid = "rsc_taxonomy_menu_markup_$vid";
  $markup = cache_get($cid);
  
  if (empty($markup)) {
  
    $tree = rsc_taxonomy_get_vocab_tree($vid);
  
//     drupal_set_message("Missed cache. Recreating markup.");

    function get_items($tree) {
      $items = array();
      foreach($tree as $tid => &$term) {
        $children = get_items($term->children);
        $items[$tid] = array(
          'data'       => l($term->name,"taxonomy/term/{$term->tid}"),
          'children'   => $children,
          );
        if (!empty($children)) {
          $items[$tid]['class'][] = 'menuparent';
        }
      }
      return $items;
    }
  
    $list = array(
      '#theme'      => 'item_list',
      '#items'      => get_items($tree),
      '#attributes' => array(
        'class' => array('rsc-taxonomy-menu'),
      ),
    );
  
    $markup = render($list);
  
    cache_set($cid, $markup, 'cache', CACHE_PERMANENT); // cache the markup
    variable_set("rsc_taxonomy_menu_modified_$vid",time());  // set modification time
  
  } else {
    //         drupal_set_message("Hit cache. Reusing markup.");
    $markup = &$markup->data;
  }
  
  return $markup;
}


/**
 * Custom minimal (fast) delivery callback for ajax requests
 * @param $page_callback_result
 * The result to return to the browser
 */
function rsc_taxonomy_menu_delivery_callback($page_callback_result) {
  print $page_callback_result;
  drupal_exit();
}


/**
 * Access callback for rsc taxonomy menu requests
 * @param $vid
 * The vocabulary id for which to check access
 * @return bool
 * Whether to allow access or not
 */
function rsc_taxonomy_menu_access_callback($vid) {
  // TODO: how will access checks be handled?
  // for now, allow access to the menu for everyone if the vocabulary is enabled in admin form

  $settings = variable_get("rsc_taxonomy_settings", NULL);
  return (isset($settings['menus_enabled'][$vid]) && $settings['menus_enabled'][$vid]);

}

